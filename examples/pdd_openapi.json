{
  "openapi": "3.1.0",
  "info": {
    "title": "StoreHub PinDuoDuo API",
    "description": "Comprehensive API for StoreHub PinDuoDuo group buying platform.\n\nThis API provides endpoints for:\n- Authentication and authorization\n- Group buy management\n- Merchant operations (addresses, orders)\n- Master administrative functions\n- Payment processing\n- Demand management\n- Notifications\n- File uploads\n- Recommendations\n- System administration\n",
    "version": "1.0.0",
    "contact": {
      "name": "StorehubPDD Team",
      "email": "support@storehub.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001/api/v1",
      "description": "Development server"
    },
    {
      "url": "https://api.storehub.com/v1",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Bearer Token authentication"
      }
    },
    "schemas": {
      "MerchantLoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "merchant@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "password123"
          }
        }
      },
      "MasterLoginRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "example": "master"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "masterpass"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string",
            "example": "Login successful"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user_123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "role": {
            "type": "string",
            "enum": [
              "merchant",
              "master"
            ],
            "example": "merchant"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "GroupBuy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "gb_123"
          },
          "title": {
            "type": "string",
            "example": "Fresh Fruits Group Buy"
          },
          "description": {
            "type": "string",
            "example": "High quality seasonal fruits"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/image.jpg"
          },
          "originalPrice": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "groupPrice": {
            "type": "number",
            "format": "float",
            "example": 79.99
          },
          "minParticipants": {
            "type": "integer",
            "minimum": 1,
            "example": 5
          },
          "maxParticipants": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "currentParticipants": {
            "type": "integer",
            "minimum": 0,
            "example": 12
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "completed",
              "expired",
              "cancelled"
            ],
            "example": "active"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-07T23:59:59Z"
          },
          "createdBy": {
            "type": "string",
            "example": "master_123"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "GroupBuyList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupBuy"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "GroupBuyDetail": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/GroupBuy"
          }
        }
      },
      "CreateGroupBuyRequest": {
        "type": "object",
        "required": [
          "title",
          "description",
          "originalPrice",
          "groupPrice",
          "minParticipants",
          "maxParticipants",
          "endTime"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Fresh Fruits Group Buy"
          },
          "description": {
            "type": "string",
            "example": "High quality seasonal fruits"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/image.jpg"
          },
          "originalPrice": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "groupPrice": {
            "type": "number",
            "format": "float",
            "example": 79.99
          },
          "minParticipants": {
            "type": "integer",
            "minimum": 1,
            "example": 5
          },
          "maxParticipants": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-07T23:59:59Z"
          }
        }
      },
      "ParticipateRequest": {
        "type": "object",
        "required": [
          "quantity",
          "deliveryAddressId"
        ],
        "properties": {
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 2
          },
          "deliveryAddressId": {
            "type": "string",
            "example": "addr_123"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "addr_123"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "addressLine": {
            "type": "string",
            "example": "123 Main St, Apt 4B"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "10001"
          },
          "isDefault": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "AddressList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "CreateAddressRequest": {
        "type": "object",
        "required": [
          "name",
          "phone",
          "addressLine",
          "city",
          "state",
          "zipCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "addressLine": {
            "type": "string",
            "example": "123 Main St, Apt 4B"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "zipCode": {
            "type": "string",
            "example": "10001"
          },
          "isDefault": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "order_123"
          },
          "groupBuyId": {
            "type": "string",
            "example": "gb_123"
          },
          "userId": {
            "type": "string",
            "example": "user_123"
          },
          "quantity": {
            "type": "integer",
            "example": 2
          },
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 79.99
          },
          "totalAmount": {
            "type": "number",
            "format": "float",
            "example": 159.98
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "paid",
              "shipped",
              "delivered",
              "cancelled",
              "refunded"
            ],
            "example": "pending"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "paymentStatus": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "pending"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "OrderList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "orderId": {
            "type": "string",
            "example": "order_123"
          },
          "paymentStatus": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed",
              "refunded"
            ],
            "example": "completed"
          },
          "transactionId": {
            "type": "string",
            "example": "txn_123"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "example": 159.98
          },
          "message": {
            "type": "string",
            "example": "Payment successful"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 20
          },
          "total": {
            "type": "integer",
            "example": 100
          },
          "totalPages": {
            "type": "integer",
            "example": 5
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation successful"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "example": "Invalid input parameters"
          },
          "code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "Demand": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "demand_123"
          },
          "merchantId": {
            "oneOf": [
              {
                "type": "string",
                "example": "merchant_123"
              },
              {
                "$ref": "#/components/schemas/MerchantInfo"
              }
            ]
          },
          "productName": {
            "type": "string",
            "maxLength": 200,
            "example": "Fresh Organic Apples"
          },
          "productSpec": {
            "type": "string",
            "maxLength": 500,
            "example": "Grade A, 5kg boxes, Red Delicious variety"
          },
          "expectedPrice": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 25.99
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 50
          },
          "urgency": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "example": "medium"
          },
          "category": {
            "type": "string",
            "maxLength": 100,
            "example": "Fresh Produce"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "example": "Looking for high-quality organic apples for retail store"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "integrated",
              "rejected",
              "fulfilled"
            ],
            "example": "pending"
          },
          "masterNotes": {
            "type": "string",
            "maxLength": 500,
            "example": "Reviewing supplier options"
          },
          "integratedGroupBuyId": {
            "type": "string",
            "example": "gb_456"
          },
          "integrateReason": {
            "type": "string",
            "enum": [
              "\u9700\u6c42\u5408\u5e76",
              "\u76f8\u4f3c\u5546\u54c1\u5408\u5e76",
              "\u4ef7\u683c\u66f4\u4f18\u6e20\u9053",
              "\u4f9b\u5e94\u5145\u8db3\u6279\u91cf\u6574\u5408",
              "\u5176\u4ed6"
            ],
            "example": "\u76f8\u4f3c\u5546\u54c1\u5408\u5e76"
          },
          "rejectReason": {
            "type": "string",
            "enum": [
              "\u4fe1\u606f\u4e0d\u5b8c\u6574",
              "\u4e0d\u7b26\u5408\u54c1\u7c7b",
              "\u4ef7\u683c\u4e0d\u5408\u7406",
              "\u65e0\u8d27\u6e90",
              "\u91cd\u590d\u9700\u6c42",
              "\u5176\u4ed6"
            ],
            "example": "\u4ef7\u683c\u4e0d\u5408\u7406"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "MerchantInfo": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "merchant_123"
          },
          "companyName": {
            "type": "string",
            "example": "ABC Trading Co."
          },
          "contactName": {
            "type": "string",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@abctrading.com"
          }
        }
      },
      "CreateDemandRequest": {
        "type": "object",
        "required": [
          "productName",
          "productSpec",
          "expectedPrice",
          "quantity",
          "category"
        ],
        "properties": {
          "productName": {
            "type": "string",
            "maxLength": 200,
            "example": "Fresh Organic Apples"
          },
          "productSpec": {
            "type": "string",
            "maxLength": 500,
            "example": "Grade A, 5kg boxes, Red Delicious variety"
          },
          "expectedPrice": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 25.99
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 50
          },
          "urgency": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "default": "medium",
            "example": "medium"
          },
          "category": {
            "type": "string",
            "maxLength": 100,
            "example": "Fresh Produce"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "example": "Looking for high-quality organic apples for retail store"
          }
        }
      },
      "UpdateDemandRequest": {
        "type": "object",
        "properties": {
          "productName": {
            "type": "string",
            "maxLength": 200,
            "example": "Fresh Organic Apples"
          },
          "productSpec": {
            "type": "string",
            "maxLength": 500,
            "example": "Grade A, 5kg boxes, Red Delicious variety"
          },
          "expectedPrice": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 25.99
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "example": 50
          },
          "urgency": {
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ],
            "example": "medium"
          },
          "category": {
            "type": "string",
            "maxLength": 100,
            "example": "Fresh Produce"
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "example": "Looking for high-quality organic apples for retail store"
          }
        }
      },
      "DemandList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Demand"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "DemandStatusUpdate": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "integrated",
              "rejected",
              "fulfilled"
            ],
            "example": "processing"
          },
          "masterNotes": {
            "type": "string",
            "maxLength": 500,
            "example": "Reviewing supplier options"
          },
          "integratedGroupBuyId": {
            "type": "string",
            "example": "gb_456"
          },
          "integrateReason": {
            "type": "string",
            "enum": [
              "\u9700\u6c42\u5408\u5e76",
              "\u76f8\u4f3c\u5546\u54c1\u5408\u5e76",
              "\u4ef7\u683c\u66f4\u4f18\u6e20\u9053",
              "\u4f9b\u5e94\u5145\u8db3\u6279\u91cf\u6574\u5408",
              "\u5176\u4ed6"
            ],
            "example": "\u76f8\u4f3c\u5546\u54c1\u5408\u5e76"
          },
          "rejectReason": {
            "type": "string",
            "enum": [
              "\u4fe1\u606f\u4e0d\u5b8c\u6574",
              "\u4e0d\u7b26\u5408\u54c1\u7c7b",
              "\u4ef7\u683c\u4e0d\u5408\u7406",
              "\u65e0\u8d27\u6e90",
              "\u91cd\u590d\u9700\u6c42",
              "\u5176\u4ed6"
            ],
            "example": "\u4ef7\u683c\u4e0d\u5408\u7406"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "notif_123"
          },
          "userId": {
            "type": "string",
            "example": "user_123"
          },
          "userType": {
            "type": "string",
            "enum": [
              "merchant",
              "master"
            ],
            "example": "merchant"
          },
          "type": {
            "type": "string",
            "enum": [
              "payment_success",
              "payment_failed",
              "refund_success",
              "group_buy_success",
              "group_buy_failed"
            ],
            "example": "payment_success"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "example": "Payment Successful"
          },
          "content": {
            "type": "string",
            "maxLength": 1000,
            "example": "Your payment for order #12345 has been processed successfully"
          },
          "relatedId": {
            "type": "string",
            "example": "order_123"
          },
          "isRead": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        }
      },
      "NotificationList": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "UnreadCountResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "count": {
            "type": "integer",
            "example": 5
          }
        }
      },
      "UploadResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "example": "http://localhost:3001/uploads/1234567890-image.jpg"
              }
            }
          },
          "message": {
            "type": "string",
            "example": "Upload success"
          }
        }
      },
      "RecommendationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "hasAlert": {
                "type": "boolean",
                "example": true
              },
              "alertCount": {
                "type": "integer",
                "example": 3
              },
              "urgent": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupBuy"
                }
              },
              "materials": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupBuy"
                }
              },
              "popular": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupBuy"
                }
              }
            }
          }
        }
      },
      "SystemStatus": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "healthy"
              },
              "uptime": {
                "type": "number",
                "example": 86400
              },
              "database": {
                "type": "string",
                "example": "connected"
              },
              "redis": {
                "type": "string",
                "example": "connected"
              }
            }
          }
        }
      },
      "CronJobStatus": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "jobs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "processExpiredGroupBuys"
                    },
                    "status": {
                      "type": "string",
                      "example": "running"
                    },
                    "lastRun": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "nextRun": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-01T01:00:00Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/auth/merchant/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Merchant login",
        "description": "Authenticate merchant and return JWT token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/master/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Master login",
        "description": "Authenticate master user and return JWT token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterLoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh JWT token",
        "description": "Refresh an expired JWT token using a refresh token",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "Logout user and invalidate JWT token",
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user information",
        "description": "Get current authenticated user's profile information",
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/group-buys/category-tags": {
      "get": {
        "tags": [
          "Group Buy Management"
        ],
        "summary": "Get category tags",
        "description": "Get list of available category tags for filtering group buys",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Category tags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "For Retail",
                        "For F&B",
                        "Shop All",
                        "Samples"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/group-buys": {
      "get": {
        "tags": [
          "Group Buy Management"
        ],
        "summary": "Get group buy list",
        "description": "Get list of active group buys with pagination",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "completed",
                "expired",
                "cancelled"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by title or description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group buy list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupBuyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/group-buys/{id}": {
      "get": {
        "tags": [
          "Group Buy Management"
        ],
        "summary": "Get group buy details",
        "description": "Get detailed information about a specific group buy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group buy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group buy details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupBuyDetail"
                }
              }
            }
          },
          "404": {
            "description": "Group buy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/group-buys/{id}/participate": {
      "post": {
        "tags": [
          "Group Buy Management"
        ],
        "summary": "Participate in group buy",
        "description": "Join a group buy with specified quantity and delivery address",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Group buy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully joined group buy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully joined group buy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Group buy not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/addresses": {
      "get": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Get merchant addresses",
        "description": "Get list of merchant's delivery addresses",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Address list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Create merchant address",
        "description": "Add a new delivery address for the merchant",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Address"
                    },
                    "message": {
                      "type": "string",
                      "example": "Address created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/addresses/{addressId}": {
      "put": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Update merchant address",
        "description": "Update an existing delivery address for the merchant",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "description": "Address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Address"
                    },
                    "message": {
                      "type": "string",
                      "example": "Address updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Delete merchant address",
        "description": "Delete a delivery address for the merchant",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "description": "Address ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/orders": {
      "get": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Get merchant orders",
        "description": "Get list of merchant's orders with pagination",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "paid",
                "shipped",
                "delivered",
                "cancelled",
                "refunded"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/orders/{orderId}": {
      "get": {
        "tags": [
          "Merchant Management"
        ],
        "summary": "Get order details",
        "description": "Get detailed information about a specific order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/master/group-buys": {
      "get": {
        "tags": [
          "Master Management"
        ],
        "summary": "Master get group buys",
        "description": "Get all group buys for master management",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "completed",
                "expired",
                "cancelled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group buy list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupBuyList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Master Management"
        ],
        "summary": "Create group buy",
        "description": "Create a new group buy (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupBuyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group buy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/GroupBuy"
                    },
                    "message": {
                      "type": "string",
                      "example": "Group buy created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/pay": {
      "post": {
        "tags": [
          "Payment Management"
        ],
        "summary": "Process payment",
        "description": "Process payment for a group buy order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupBuyId",
                  "amount"
                ],
                "properties": {
                  "groupBuyId": {
                    "type": "string",
                    "example": "gb_123"
                  },
                  "amount": {
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "example": 159.98
                  },
                  "paymentMethod": {
                    "type": "string",
                    "enum": [
                      "mock"
                    ],
                    "default": "mock",
                    "example": "mock"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/mock/{orderId}": {
      "post": {
        "tags": [
          "Payment Management"
        ],
        "summary": "Mock payment",
        "description": "Simulate payment for testing purposes",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "Order ID to process payment for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "example": true,
                    "description": "Whether to simulate successful payment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/refund/{orderId}": {
      "post": {
        "tags": [
          "Payment Management"
        ],
        "summary": "Request refund",
        "description": "Request a refund for an order (for testing purposes)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "Order ID to refund",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/status/{orderId}": {
      "get": {
        "tags": [
          "Payment Management"
        ],
        "summary": "Get payment status",
        "description": "Check the payment status of an order",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "Order ID to check payment status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/demands": {
      "get": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Get demands list",
        "description": "Get list of product demands with filtering and pagination",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "integrated",
                "rejected",
                "fulfilled"
              ]
            }
          },
          {
            "name": "urgency",
            "in": "query",
            "description": "Filter by urgency",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high"
              ]
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by product name or description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demands list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Create demand",
        "description": "Create a new product demand (Merchant only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDemandRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Demand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Demand"
                    },
                    "message": {
                      "type": "string",
                      "example": "Demand created successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Merchant access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/demands/stats": {
      "get": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Get demand statistics",
        "description": "Get demand statistics (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "example": 150
                        },
                        "pending": {
                          "type": "integer",
                          "example": 45
                        },
                        "processing": {
                          "type": "integer",
                          "example": 30
                        },
                        "integrated": {
                          "type": "integer",
                          "example": 50
                        },
                        "rejected": {
                          "type": "integer",
                          "example": 15
                        },
                        "fulfilled": {
                          "type": "integer",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/demands/{id}": {
      "get": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Get demand details",
        "description": "Get detailed information about a specific demand",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Demand ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demand details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Demand"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Demand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Update demand",
        "description": "Update a demand (Merchant can update own demands, Master can update any)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Demand ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDemandRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Demand updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Demand"
                    },
                    "message": {
                      "type": "string",
                      "example": "Demand updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Demand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Delete demand",
        "description": "Delete a demand (Merchant can delete own demands, Master can delete any)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Demand ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Demand deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Demand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/demands/{id}/status": {
      "put": {
        "tags": [
          "Demand Management"
        ],
        "summary": "Update demand status",
        "description": "Update demand status (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Demand ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemandStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Demand status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/Demand"
                    },
                    "message": {
                      "type": "string",
                      "example": "Demand status updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Demand not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Get notifications",
        "description": "Get list of notifications for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "isRead",
            "in": "query",
            "description": "Filter by read status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Clear all notifications",
        "description": "Delete all notifications for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/unread-count": {
      "get": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Get unread notification count",
        "description": "Get the count of unread notifications for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Unread count retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnreadCountResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/read-all": {
      "put": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Mark all notifications as read",
        "description": "Mark all notifications as read for the current user",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}/read": {
      "put": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Mark notification as read",
        "description": "Mark a specific notification as read",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Notification ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification marked as read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "delete": {
        "tags": [
          "Notification Management"
        ],
        "summary": "Delete notification",
        "description": "Delete a specific notification",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Notification ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Notification not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/upload/image": {
      "post": {
        "tags": [
          "File Upload"
        ],
        "summary": "Upload image",
        "description": "Upload an image file (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload (max 5MB)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No file or invalid file type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/recommendations": {
      "get": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Get recommendations",
        "description": "Get AI-powered product recommendations for the current merchant",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Recommendations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get recommendations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/status": {
      "get": {
        "tags": [
          "System Administration"
        ],
        "summary": "Get system status",
        "description": "Get current system health status (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "System status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/process-expired-group-buys": {
      "post": {
        "tags": [
          "System Administration"
        ],
        "summary": "Process expired group buys",
        "description": "Manually trigger processing of expired group buys (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Expired group buys processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cron/status": {
      "get": {
        "tags": [
          "System Administration"
        ],
        "summary": "Get cron job status",
        "description": "Get status of all cron jobs (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cron job status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronJobStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cron/{jobName}/trigger": {
      "post": {
        "tags": [
          "System Administration"
        ],
        "summary": "Trigger cron job",
        "description": "Manually trigger a specific cron job (Master only)",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "jobName",
            "in": "path",
            "required": true,
            "description": "Name of the cron job to trigger",
            "schema": {
              "type": "string",
              "example": "processExpiredGroupBuys"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cron job triggered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid job name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Master access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Group Buy Management",
      "description": "Group buying functionality for merchants"
    },
    {
      "name": "Merchant Management",
      "description": "Merchant-specific operations"
    },
    {
      "name": "Master Management",
      "description": "Master user administrative operations"
    },
    {
      "name": "Payment Management",
      "description": "Payment processing and status checking"
    },
    {
      "name": "Demand Management",
      "description": "Product demand management and processing"
    },
    {
      "name": "Notification Management",
      "description": "User notification system"
    },
    {
      "name": "File Upload",
      "description": "File upload functionality"
    },
    {
      "name": "Recommendations",
      "description": "AI-powered product recommendations"
    },
    {
      "name": "System Administration",
      "description": "System administration and monitoring"
    }
  ]
}