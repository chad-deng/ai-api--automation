# Production Dockerfile
# AI API Test Automation Framework - Enterprise Edition

# Multi-stage build for optimized production image
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Run build process
RUN npm run build

# Run tests to ensure quality
RUN npm test

# Remove dev dependencies
RUN npm ci --production && npm cache clean --force

# Production stage
FROM node:18-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S apitest -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=apitest:nodejs /app/dist ./dist
COPY --from=builder --chown=apitest:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=apitest:nodejs /app/package*.json ./

# Create necessary directories
RUN mkdir -p logs temp reports && \
    chown -R apitest:nodejs logs temp reports

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080
ENV LOG_LEVEL=info
ENV HEALTH_CHECK_PORT=8080

# Expose ports
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${HEALTH_CHECK_PORT}/health || exit 1

# Switch to non-root user
USER apitest

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/cli.js"]

# Labels for metadata
LABEL \
    name="ai-api-test-automation" \
    version="1.0.0" \
    description="Enterprise-grade API test automation framework" \
    maintainer="development-team@yourorg.com" \
    vendor="YourOrg" \
    documentation="https://docs.api-test-automation.com" \
    source="https://github.com/yourorg/ai-api-test-automation"