# Default values for AI API Test Automation Framework
# This is a YAML-formatted file.

# Application configuration
app:
  name: ai-api-test-automation
  version: "1.0.0"
  environment: production

# Image configuration
image:
  repository: registry.yourorg.com/ai-api-test-automation
  tag: "1.0.0"
  pullPolicy: Always
  pullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
  hosts:
    - host: api-test-automation.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: api-test-automation-tls
      hosts:
        - api-test-automation.com

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - ai-api-test-automation
            topologyKey: kubernetes.io/hostname

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Health checks
healthChecks:
  livenessProbe:
    httpGet:
      path: /health/live
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 3

# Environment variables
env:
  NODE_ENV: production
  LOG_LEVEL: info
  PORT: "8080"

# Configuration
config:
  # Authentication configuration
  auth:
    enabled: true
    provider: oauth2
    tokenExpiry: 3600
  
  # Performance configuration
  performance:
    caching:
      enabled: true
      ttl: 3600
    rateLimiting:
      enabled: true
      requests: 1000
      window: 60
  
  # Security configuration
  security:
    scanningEnabled: true
    complianceChecks: true
    encryptionEnabled: true

# Persistent storage
persistence:
  enabled: true
  storageClass: "ssd"
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/data

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels: {}

# Logging configuration
logging:
  enabled: true
  level: info
  format: json
  output: stdout

# External dependencies
dependencies:
  redis:
    enabled: true
    architecture: standalone
    auth:
      enabled: true
      password: "your-redis-password"
    master:
      persistence:
        enabled: true
        size: 5Gi
  
  mongodb:
    enabled: true
    auth:
      enabled: true
      rootUser: "admin"
      rootPassword: "your-mongodb-password"
    persistence:
      enabled: true
      size: 20Gi
  
  elasticsearch:
    enabled: true
    replicas: 1
    minimumMasterNodes: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 27017 # MongoDB
        - protocol: TCP
          port: 9200  # Elasticsearch

# Secrets
secrets:
  # API keys and tokens
  apiKeys:
    create: true
    data: {}
  
  # Database credentials
  database:
    create: true
    data:
      mongodb-root-password: "your-mongodb-password"
      redis-password: "your-redis-password"

# ConfigMaps
configMaps:
  app:
    create: true
    data:
      config.json: |
        {
          "app": {
            "name": "ai-api-test-automation",
            "version": "1.0.0",
            "environment": "production"
          },
          "server": {
            "port": 8080,
            "host": "0.0.0.0"
          },
          "logging": {
            "level": "info",
            "format": "json"
          }
        }

# Jobs and CronJobs
jobs:
  migration:
    enabled: false
    image:
      repository: registry.yourorg.com/ai-api-test-automation
      tag: "1.0.0"
    command: ["npm", "run", "migrate"]
  
  backup:
    enabled: true
    schedule: "0 2 * * *"
    image:
      repository: registry.yourorg.com/backup-tools
      tag: "latest"
    command: ["./backup.sh"]

# Operators and CRDs
operators:
  certManager:
    enabled: true
  
  prometheus:
    enabled: true

# Testing
tests:
  enabled: true
  image:
    repository: registry.yourorg.com/ai-api-test-automation
    tag: "1.0.0"
  command: ["npm", "test"]