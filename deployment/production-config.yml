# Production Deployment Configuration
# AI API Test Automation Framework - Enterprise Edition

apiVersion: v1
kind: ConfigMap
metadata:
  name: production-config
  namespace: api-test-automation
data:
  # Application Configuration
  app:
    name: "ai-api-test-automation"
    version: "1.0.0"
    environment: "production"
    logLevel: "info"
    
  # Infrastructure Configuration
  infrastructure:
    # Container Configuration
    container:
      image: "api-test-automation:latest"
      registry: "registry.yourorg.com"
      pullPolicy: "Always"
      resources:
        requests:
          cpu: "500m"
          memory: "1Gi"
        limits:
          cpu: "2000m"
          memory: "4Gi"
      
    # Scaling Configuration
    scaling:
      replicas: 3
      maxReplicas: 10
      minReplicas: 2
      targetCPUUtilization: 70
      targetMemoryUtilization: 80
      
    # Network Configuration
    network:
      loadBalancer:
        type: "Application"
        protocol: "HTTPS"
        port: 443
        healthCheck:
          path: "/health"
          interval: 30
          timeout: 5
          healthyThreshold: 2
          unhealthyThreshold: 5
      
    # Storage Configuration
    storage:
      type: "persistent"
      size: "100Gi"
      storageClass: "ssd"
      backupPolicy:
        enabled: true
        schedule: "0 2 * * *"
        retention: "30d"

  # Security Configuration
  security:
    # Authentication
    authentication:
      enabled: true
      provider: "oauth2"
      tokenExpiry: "1h"
      refreshTokenExpiry: "7d"
      
    # Authorization
    authorization:
      rbac:
        enabled: true
        roles:
          - name: "admin"
            permissions: ["*"]
          - name: "developer"
            permissions: ["read", "test", "generate"]
          - name: "viewer"
            permissions: ["read"]
            
    # Encryption
    encryption:
      inTransit:
        enabled: true
        protocol: "TLS1.3"
        certificateSource: "letsencrypt"
      atRest:
        enabled: true
        algorithm: "AES-256"
        keyRotation: "90d"
        
    # Security Scanning
    scanning:
      vulnerabilityScanning:
        enabled: true
        schedule: "0 6 * * *"
        severityThreshold: "medium"
      complianceScanning:
        enabled: true
        standards: ["OWASP", "CIS", "SOC2"]
        
  # Monitoring Configuration
  monitoring:
    # Metrics Collection
    metrics:
      enabled: true
      endpoint: "/metrics"
      format: "prometheus"
      scrapeInterval: "30s"
      
    # Logging
    logging:
      level: "info"
      format: "json"
      destination: "elasticsearch"
      retention: "90d"
      
    # Health Checks
    healthChecks:
      liveness:
        enabled: true
        path: "/health/live"
        interval: 30
        timeout: 5
      readiness:
        enabled: true
        path: "/health/ready"
        interval: 10
        timeout: 3
        
    # Alerting
    alerting:
      enabled: true
      channels:
        - type: "slack"
          webhook: "${SLACK_WEBHOOK_URL}"
        - type: "email"
          recipients: ["ops@yourorg.com"]
      rules:
        - name: "high_cpu_usage"
          condition: "cpu_usage > 85"
          duration: "5m"
          severity: "warning"
        - name: "high_memory_usage"
          condition: "memory_usage > 90"
          duration: "5m"
          severity: "critical"
        - name: "high_error_rate"
          condition: "error_rate > 5"
          duration: "2m"
          severity: "critical"

  # Performance Configuration
  performance:
    # Caching
    caching:
      enabled: true
      provider: "redis"
      ttl: "1h"
      maxSize: "1GB"
      
    # Connection Pooling
    connectionPooling:
      enabled: true
      maxConnections: 100
      minConnections: 10
      connectionTimeout: "30s"
      idleTimeout: "5m"
      
    # Rate Limiting
    rateLimiting:
      enabled: true
      requests: 1000
      window: "1m"
      burst: 100
      
    # Optimization
    optimization:
      compression:
        enabled: true
        algorithm: "gzip"
        level: 6
      keepAlive:
        enabled: true
        timeout: "65s"
        maxRequests: 100

  # Backup and Recovery Configuration
  backup:
    # Data Backup
    data:
      enabled: true
      schedule: "0 2 * * *"
      retention: "30d"
      destination: "s3://backups.yourorg.com/api-test-automation"
      encryption: true
      
    # Configuration Backup
    configuration:
      enabled: true
      schedule: "0 4 * * *"
      retention: "90d"
      versioning: true
      
    # Disaster Recovery
    disasterRecovery:
      enabled: true
      rto: "4h"  # Recovery Time Objective
      rpo: "1h"  # Recovery Point Objective
      backupSite: "us-west-2"
      testSchedule: "monthly"

  # Compliance Configuration
  compliance:
    # Audit Logging
    auditLogging:
      enabled: true
      events:
        - "authentication"
        - "authorization"
        - "data_access"
        - "configuration_changes"
      retention: "7y"
      
    # Data Protection
    dataProtection:
      gdpr:
        enabled: true
        dataRetention: "2y"
        rightToErasure: true
      hipaa:
        enabled: false
      sox:
        enabled: true
        
    # Regulatory Compliance
    regulatory:
      standards:
        - "SOC2"
        - "ISO27001"
        - "PCI-DSS"
      auditSchedule: "quarterly"
      reportGeneration: true

---
# Production Deployment Script
apiVersion: batch/v1
kind: Job
metadata:
  name: production-deployment
  namespace: api-test-automation
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: deployer
        image: deployment-tools:latest
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: VERSION
          valueFrom:
            configMapKeyRef:
              name: production-config
              key: app.version
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          
          echo "ðŸš€ Starting production deployment..."
          echo "Environment: $ENVIRONMENT"
          echo "Version: $VERSION"
          
          # Pre-deployment checks
          echo "ðŸ“‹ Running pre-deployment checks..."
          ./scripts/pre-deployment-checks.sh
          
          # Security validation
          echo "ðŸ”’ Running security validation..."
          ./scripts/security-validation.sh
          
          # Performance validation
          echo "âš¡ Running performance validation..."
          ./scripts/performance-validation.sh
          
          # Deploy application
          echo "ðŸ”„ Deploying application..."
          ./scripts/deploy-application.sh
          
          # Post-deployment verification
          echo "âœ… Running post-deployment verification..."
          ./scripts/post-deployment-verification.sh
          
          echo "ðŸŽ‰ Production deployment completed successfully!"

---
# Production Service Definition
apiVersion: v1
kind: Service
metadata:
  name: api-test-automation-service
  namespace: api-test-automation
  labels:
    app: api-test-automation
    environment: production
spec:
  type: LoadBalancer
  ports:
  - port: 443
    targetPort: 8080
    protocol: TCP
    name: https
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: api-test-automation
    environment: production

---
# Production Ingress Definition
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-test-automation-ingress
  namespace: api-test-automation
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api-test-automation.com
    - www.api-test-automation.com
    secretName: api-test-automation-tls
  rules:
  - host: api-test-automation.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-test-automation-service
            port:
              number: 443