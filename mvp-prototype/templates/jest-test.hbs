import request from 'supertest';
{{#if hasAuth}}
import { setupAuth } from './setup';
{{/if}}

const baseURL = '{{serverUrl}}';

describe('{{groupName}} API Tests', () => {
  {{#if hasAuth}}
  let authHeaders: Record<string, string>;
  
  beforeAll(async () => {
    authHeaders = await setupAuth();
  });
  {{/if}}

  {{#each endpoints}}
  describe('{{method}} {{path}}', () => {
    it('should return {{expectedStatus}} for valid request', async () => {
      const response = await request(baseURL)
        .{{method_lower}}('{{path_processed}}')
        {{#if ../hasAuth}}.set(authHeaders){{/if}}
        {{#if hasBody}}.send({{testData}}){{/if}};
      
      expect(response.status).toBe({{expectedStatus}});
      {{#if hasSchema}}
      // Response schema validation
      expect(response.body).toBeDefined();
      {{/if}}
    });

    {{#if hasErrorCases}}
    it('should handle invalid requests appropriately', async () => {
      const response = await request(baseURL)
        .{{method_lower}}('{{path_processed}}')
        {{#if ../hasAuth}}.set(authHeaders){{/if}}
        .send({}); // Invalid/empty data
      
      expect([400, 401, 422, 500]).toContain(response.status);
    });
    {{/if}}
  });
  {{/each}}
});