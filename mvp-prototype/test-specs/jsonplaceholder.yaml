openapi: 3.0.0
info:
  title: JSONPlaceholder API
  version: 1.0.0
  description: Free fake API for testing and prototyping
servers:
  - url: https://jsonplaceholder.typicode.com
    description: JSONPlaceholder server

paths:
  /posts:
    get:
      summary: Get all posts
      operationId: getAllPosts
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
        - name: _limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a post
      operationId: createPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a post by ID
      operationId: getPostById
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post
      operationId: updatePost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      summary: Delete a post
      operationId: deletePost
      responses:
        '200':
          description: Post deleted successfully

  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a user by ID
      operationId: getUserById
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Post:
      type: object
      required:
        - id
        - userId
        - title
        - body
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        title:
          type: string
          example: "sunt aut facere repellat provident occaecati excepturi optio reprehenderit"
        body:
          type: string
          example: "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"

    CreatePost:
      type: object
      required:
        - userId
        - title
        - body
      properties:
        userId:
          type: integer
          example: 1
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "New Post Title"
        body:
          type: string
          minLength: 1
          maxLength: 2000
          example: "This is the content of the new post."

    UpdatePost:
      type: object
      properties:
        userId:
          type: integer
        title:
          type: string
          minLength: 1
          maxLength: 200
        body:
          type: string
          minLength: 1
          maxLength: 2000

    User:
      type: object
      required:
        - id
        - name
        - username
        - email
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Leanne Graham"
        username:
          type: string
          example: "Bret"
        email:
          type: string
          format: email
          example: "Sincere@april.biz"
        address:
          type: object
          properties:
            street:
              type: string
              example: "Kulas Light"
            suite:
              type: string
              example: "Apt. 556"
            city:
              type: string
              example: "Gwenborough"
            zipcode:
              type: string
              example: "92998-3874"
            geo:
              type: object
              properties:
                lat:
                  type: string
                  example: "-37.3159"
                lng:
                  type: string
                  example: "81.1496"
        phone:
          type: string
          example: "1-770-736-8031 x56442"
        website:
          type: string
          format: uri
          example: "hildegard.org"
        company:
          type: object
          properties:
            name:
              type: string
              example: "Romaguera-Crona"
            catchPhrase:
              type: string
              example: "Multi-layered client-server neural-net"
            bs:
              type: string
              example: "harness real-time e-markets"