openapi: 3.0.3
info:
  title: Enterprise Complex API
  version: 1.0.0
  description: Complex enterprise API with authentication, nested schemas, and advanced features
servers:
  - url: https://api.enterprise.example.com/v1
    description: Production server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /users:
    get:
      summary: List users with complex filtering
      operationId: listUsers
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, pending, suspended]
        - name: roles
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [admin, user, viewer, editor]
        - name: created_after
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUserRequest'
                - type: object
                  properties:
                    avatar:
                      type: string
                      format: binary
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
        '409':
          description: User already exists

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user by ID
      operationId: getUserById
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    
    put:
      summary: Update user
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
        '404':
          description: User not found

  /users/{userId}/permissions:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get user permissions
      operationId: getUserPermissions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
                  inherited_from:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'

  /organizations/{orgId}/projects:
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    post:
      summary: Create project in organization
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
        - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: john_doe
        first_name:
          type: string
          minLength: 1
          maxLength: 100
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 100
          example: Doe
        status:
          type: string
          enum: [active, inactive, pending, suspended]
          example: active
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        profile:
          $ref: '#/components/schemas/UserProfile'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        created_at:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'

    CreateUserRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        password:
          type: string
          minLength: 8
          maxLength: 128
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        role_ids:
          type: array
          items:
            type: integer
            format: int64

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        first_name:
          type: string
          minLength: 1
          maxLength: 100
        last_name:
          type: string
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [active, inactive, pending, suspended]

    Role:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: admin
        description:
          type: string
          example: Administrator role with full access
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'

    Permission:
      type: object
      required:
        - id
        - name
        - resource
        - action
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: users.read
        resource:
          type: string
          example: users
        action:
          type: string
          enum: [create, read, update, delete, list]
        conditions:
          type: object
          additionalProperties: true

    UserProfile:
      type: object
      properties:
        avatar_url:
          type: string
          format: uri
          example: https://example.com/avatars/user123.jpg
        bio:
          type: string
          maxLength: 500
          example: Software developer with 5+ years experience
        location:
          type: string
          maxLength: 100
          example: San Francisco, CA
        website:
          type: string
          format: uri
          example: https://johndoe.dev
        social_links:
          type: object
          properties:
            twitter:
              type: string
              example: johndoe
            linkedin:
              type: string
              example: john-doe-dev
            github:
              type: string
              example: johndoe

    UserPreferences:
      type: object
      properties:
        timezone:
          type: string
          example: America/Los_Angeles
        language:
          type: string
          enum: [en, es, fr, de, ja, zh]
          default: en
        email_notifications:
          type: boolean
          default: true
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        items_per_page:
          type: integer
          minimum: 10
          maximum: 100
          default: 20

    Pagination:
      type: object
      required:
        - total
        - limit
        - offset
      properties:
        total:
          type: integer
          format: int64
          example: 1000
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        has_next:
          type: boolean
          example: true
        has_previous:
          type: boolean
          example: false

    ProjectRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        type:
          type: string
          enum: [web, mobile, api, desktop, other]
        visibility:
          type: string
          enum: [public, private, internal]
          default: private
        settings:
          type: object
          properties:
            auto_deploy:
              type: boolean
              default: false
            require_review:
              type: boolean
              default: true
            max_contributors:
              type: integer
              minimum: 1
              maximum: 100
              default: 10

    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectRequest'
        - type: object
          required:
            - id
            - created_at
          properties:
            id:
              type: integer
              format: int64
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time